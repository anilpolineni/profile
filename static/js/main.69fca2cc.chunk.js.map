{"version":3,"sources":["profile.js","App.js","serviceWorker.js","index.js"],"names":["Profile","indexValue","this","props","location","data","id","specificprofile","Data","profiles","className","basicInfo","name","email","href","mobileno","careerobjective","object","education","map","i","j","degree","university","institute","aggregrate","skills","languages","technicalskills","weddesign","personalstrength","attitude","attitude1","attitude2","React","Component","Home","info","index","key","clallName","role","to","pathname","App","exact","path","component","profile","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAsEeA,E,uKAhEP,IAAIC,EAAWC,KAAKC,MAAMC,SAASC,KAAKC,GACpCC,EAAgBC,EAAKC,SAASR,GAClC,OAII,6BAASS,UAAU,UACf,yBAAKA,UAAU,QACX,yBAAKA,UAAU,YACf,4BAAKH,EAAgBI,UAAUC,MAC/B,4BAAKL,EAAgBI,UAAUE,QAE/B,yBAAKH,UAAU,eACf,uBAAGI,KAAM,UAAUP,EAAgBI,UAAUE,MAAOH,UAAU,QAAQH,EAAgBI,UAAUE,MAAhG,MAA4G,6BAC5G,uBAAGC,KAAM,OAAOP,EAAgBI,UAAUI,SAAUL,UAAU,QAAQH,EAAgBI,UAAUI,YAKpG,yBAAKL,UAAU,SACX,yBAAKA,UAAU,eACX,gDAEJ,yBAAKA,UAAU,YACX,2BAAIH,EAAgBS,gBAAgBC,SAIpC,yBAAKP,UAAU,eACX,uDAEA,yBAAKA,UAAU,YACVH,EAAgBW,UAAUC,KAAI,SAACC,EAAEC,GAAH,OAC/B,4BACI,4BAAKD,EAAEE,OAAP,IAAgBF,EAAEG,WAAlB,IAA+BH,EAAEI,UAAjC,IAA6CJ,EAAEK,iBAI/D,yBAAKf,UAAU,eACX,uCAEJ,yBAAKA,UAAU,YACf,4BACA,4BAAKH,EAAgBmB,OAAOC,WAC5B,4BAAKpB,EAAgBmB,OAAOE,iBAC5B,4BAAKrB,EAAgBmB,OAAOG,aAG5B,yBAAKnB,UAAU,eACX,mDAEJ,yBAAKA,UAAU,YACf,4BACA,4BAAKH,EAAgBuB,iBAAiBC,UACtC,4BAAKxB,EAAgBuB,iBAAiBE,WACtC,4BAAKzB,EAAgBuB,iBAAiBG,mB,GAzDpCC,IAAMC,W,eCU5B,IAAIC,EAAK,WACP,IAAIC,EAAK7B,EAAKC,SACd,OACA,6BAASC,UAAU,UAChB2B,EAAKlB,KAAI,SAACC,EAAEkB,GAAH,OACR,yBAAK5B,UAAU,OAAO6B,IAAKD,GACzB,yBAAKE,UAAU,YACf,4BAAKpB,EAAET,UAAUC,KAAjB,KADA,IAC6B,6BAC7B,4BAAI,4BAAKQ,EAAET,UAAU8B,QAGrB,yBAAK/B,UAAU,eAEb,uBAAGI,KAAM,UAAUM,EAAET,UAAUE,MAAOH,UAAU,QAAQU,EAAET,UAAUE,MAApE,MAAgF,6BAEhF,uBAAGC,KAAM,OAAOM,EAAET,UAAUI,SAAUL,UAAU,QAAQU,EAAET,UAAUI,UAAa,6BAEjF,kBAAC,IAAD,CAAM2B,GAAI,CAACC,SAAS,WAAWtC,KAAK,CAACC,GAAGgC,IAAS5B,UAAU,QAA3D,0BASKkC,EAlCf,WACE,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWC,IACxC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAWC,UAAWX,MCExBa,QACW,cAA7BC,OAAO9C,SAAS+C,UAEe,UAA7BD,OAAO9C,SAAS+C,UAEhBD,OAAO9C,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.69fca2cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Data from './data/data.json';\r\n\r\nclass Profile extends React.Component{\r\n    render(){\r\n        var indexValue=this.props.location.data.id;\r\n        var specificprofile=Data.profiles[indexValue];\r\n        return(\r\n            // <div>\r\n            //     <h2>{specificprofile.basicInfo.name}</h2>\r\n            // </div>\r\n            <section className=\"parent\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-top\">\r\n                    <h3>{specificprofile.basicInfo.name}</h3>\r\n                    <h3>{specificprofile.basicInfo.email}</h3>\r\n                    </div>\r\n                    <div className=\"card-bottom\">\r\n                    <a href={\"mailto:\"+specificprofile.basicInfo.email} className=\"link\">{specificprofile.basicInfo.email}  </a><br />\r\n                    <a href={\"tel:\"+specificprofile.basicInfo.mobileno} className=\"link\">{specificprofile.basicInfo.mobileno}</a>\r\n                    </div>\r\n                </div>\r\n                \r\n                \r\n                <div className=\"card2\">\r\n                    <div className=\"card-bottom\">\r\n                        <h2>CareerObjective</h2>\r\n                    </div>\r\n                    <div className=\"card-top\">\r\n                        <p>{specificprofile.careerobjective.object}</p>\r\n                        </div>\r\n                        \r\n                        \r\n                        <div className=\"card-bottom\">\r\n                            <h2>Education Qualifcation</h2>\r\n                            </div>\r\n                            <div className=\"card-top\">\r\n                                {specificprofile.education.map((i,j)=>(\r\n                                <ul>\r\n                                    <li>{i.degree} {i.university} {i.institute} {i.aggregrate}</li>\r\n                                    </ul>\r\n                                    ))}\r\n                                    </div>\r\n                    <div className=\"card-bottom\">\r\n                        <h2>Skills</h2>\r\n                    </div>\r\n                    <div className=\"card-top\">\r\n                    <ul>\r\n                    <li>{specificprofile.skills.languages}</li>\r\n                    <li>{specificprofile.skills.technicalskills}</li>\r\n                    <li>{specificprofile.skills.weddesign}</li>\r\n                    </ul>\r\n                    </div>\r\n                    <div className=\"card-bottom\">\r\n                        <h2>Personal Strenghts</h2>\r\n                    </div>\r\n                    <div className=\"card-top\">\r\n                    <ul>\r\n                    <li>{specificprofile.personalstrength.attitude}</li>\r\n                    <li>{specificprofile.personalstrength.attitude1}</li>\r\n                    <li>{specificprofile.personalstrength.attitude2}</li>\r\n                    </ul>\r\n                    </div>\r\n                    </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport profile from './profile';\nimport Data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Route exact path=\"/profile\" component={profile} />\n    <Route exact path=\"/profile\" component={Home} />\n    </BrowserRouter>\n  )\n}\nlet Home=()=>{\n  var info=Data.profiles;\n  return (\n  <section className=\"parent\">\n    {info.map((i,index)=>(\n      <div className=\"card\" key={index}>\n        <div clallName=\"card-top\">\n        <h2>{i.basicInfo.name} </h2> <br/>\n        <h4><em>{i.basicInfo.role}</em></h4>\n        </div>\n\n        <div className=\"card-bottom\">\n\n          <a href={\"mailto:\"+i.basicInfo.email} className=\"link\">{i.basicInfo.email}  </a><br />\n\n          <a href={\"tel:\"+i.basicInfo.mobileno} className=\"link\">{i.basicInfo.mobileno}</a><br />\n\n          <Link to={{pathname:\"/profile\",data:{id:index}}} className=\"link\">View Profile>> </Link>\n        </div>\n      </div>\n    ))}\n  </section>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}